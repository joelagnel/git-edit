#!/bin/bash
# An ncurses based UI to quickly select a git commit from a 'git log --online'
# output and press a key on it to perform a single action (Checkout, reword
# changelog, edit patch, etc).  Opens up vim editor when needed. Inspired by a
# grep frontend called ngp.
# Author: Joel Fernandes <joel@joelfernandes.org>

spath="$(dirname "$(readlink -f "$0")")"

function do_quit() {
  rm /tmp/ncurses*
  rm /tmp/g*.py
  exit
}

function press_any_key() {
  # If the command returns real fast, press any key
  if [ $SECONDS -lt 1 ]; then
    echo "------------"
    read -n 1 -s -r -p "Press any key to continue.."
  fi
}

##### GIT-EDIT-COMMIT
cat > /tmp/igec.py <<END0
#!/bin/bash
strstr() {
  [ "\${1#*\$2*}" = "\$1" ] && return 1
  return 0
}
strstr \$1 "git-rebase-todo"
if [ \$? -eq 0 ]; then
	# Only change the first line
	sed -i '1!b;s/pick\(.*\)/edit\1/g' .git/rebase-merge/git-rebase-todo
else
	vi \$1
fi
END0
chmod +x /tmp/igec.py

##### GIT-EDIT-PATCH
cat > /tmp/gep.py <<END2
#!/bin/bash

EDITOR=/tmp/igec.py git rebase -i \$1^

rm -rf /tmp/tmp-gep/
mkdir -p /tmp/tmp-gep/

git format-patch HEAD^ -o /tmp/tmp-gep/
vi /tmp/tmp-gep/*patch

git checkout HEAD^
git checkout .
git am /tmp/tmp-gep/*patch

git rebase --continue
END2
chmod +x /tmp/gep.py

##### GIT-REWORD-COMMIT
cat > /tmp/igrc.py <<END3
#!/bin/bash
strstr() {
  [ "\${1#*\$2*}" = "\$1" ] && return 1
  return 0
}

strstr \$1 "git-rebase-todo"
if [ \$? -eq 0 ]; then
	# Only change the first line
	sed -i '1!b;s/pick\(.*\)/reword\1/g' .git/rebase-merge/git-rebase-todo
else
	vi \$1
fi
END3
chmod +x /tmp/igrc.py

##### DROP COMMIT FROM REBASE
cat > /tmp/drop-commit.sh <<END2
#!/bin/bash

COMMIT=\$(cat /tmp/commit)
grep -v \$COMMIT .git/rebase-merge/git-rebase-todo > /tmp/gitreb
mv /tmp/gitreb .git/rebase-merge/git-rebase-todo
rm /tmp/commit
END2
chmod +x /tmp/drop-commit.sh

while [ 1 ]; do # START WHILE
git log --no-decorate --oneline | head -n 100 > /tmp/ncurses-input-tmp

chmod +x $spath/lib/tui.py
$spath/lib/tui.py

tput reset

function usage()
{
  tput reset
  echo "p:  Edit the whole patch in vim"
  echo "r:  Edit the commit message of patch in vim"
  echo "e:  Amend the patch using an interactive rebase (after this step, do 'git rebase --continue')"
  echo "o or <Enter>: Show the patch using 'git show'"
  echo "R:  Revert the <commit>"
  echo "c:  Checkout this <commit>"
  echo "s:  Show the diff stat of the <commit>"
  echo "d:  Delete the commit from the tree"
  echo "D:  Show a diff with respect to HEAD"
  echo "b:  Start an interactive rebase from this <commit>"
  echo "f:  Create a fixup against this <commit> from the unstaged changes in the tree"
  echo "F:  Create a fixup against this <commit> from the unstaged changes and start interactive rebase"
  echo "w:  Create a patch from <commit> (using git format-patch)"
  press_any_key
}

if [ -f /tmp/ncurses-output ]; then
        SECONDS=0

	cmd=$(cat /tmp/ncurses-output| cut -d '=' -f2|cut -d ' ' -f1)

	one_line=$(cat /tmp/ncurses-output|cut -d '=' -f3)
	commit=$(echo $one_line | cut -d ' ' -f1)

	# Amend the comment (then you have to do git rebase --continue)
	if [ $cmd == "h" ]; then
	        usage
	elif [ $cmd == "63" ]; then
	        usage
	elif [ $cmd == "e" ]; then
                EDITOR=/tmp/igec.py git rebase -i $commit^ --autosquash
                do_quit
	# Edit the patch of the commit
	elif [ $cmd == "p" ]; then
		/tmp/gep.py $commit
	# Reword the commit message
	elif [ $cmd == "r" ]; then
                EDITOR=/tmp/igrc.py git rebase -i $commit^
	# Show the commit
	elif [ $cmd == "10" -o $cmd == "o" ]; then
		git show $commit
                press_any_key
	# Revert
	elif [ $cmd == "R" ]; then
		git revert $commit
                press_any_key
	# Checkout
	elif [ $cmd == "c" ]; then
		git checkout $commit
	# stat of the diff
	elif [ $cmd == "s" ]; then
		git show --stat $commit
	# Delete the commit from history
        elif [ $cmd == "d" ]; then
                echo -n $commit > /tmp/commit
		EDITOR=/tmp/drop-commit.sh git rebase -i $commit^
	# Diff of the commit with respect to HEAD
        elif [ $cmd == "D" ]; then
                git diff $commit > /tmp/diff
                vi /tmp/diff
                rm /tmp/diff
	# Start interactive rebase from here
	elif [ $cmd == "b" ]; then
		git rebase -i --autosquash $commit
                press_any_key
        # Just create a fixup commit
	elif [ $cmd == "f" ]; then
		git commit -as --fixup=$commit
        # Create a fixup commit and try to merge it
	elif [ $cmd == "F" ]; then
		git commit -as --fixup=$commit
                git rebase -i $commit^ --autosquash
	# Create a patch file out of the commit
	elif [ $cmd == "w" ]; then
                git format-patch $commit^..$commit
                press_any_key
	fi

if [ $cmd == "q" ]; then
        do_quit
	exit
fi
fi

done # END WHILE
